From 125f0399684dd78950ee062016451afb4aff837a Mon Sep 17 00:00:00 2001
From: Philippe Sauter <phsauter@iis.ee.ethz.ch>
Date: Wed, 2 Oct 2024 09:59:04 +0200
Subject: [PATCH] ibex: move includes to separate dir

---
 ibex_branch_predict.sv                        |   2 +-
 ibex_compressed_decoder.sv                    |   2 +-
 ibex_controller.sv                            |   2 +-
 ibex_core.sv                                  |   2 +-
 ibex_cs_registers.sv                          |   2 +-
 ibex_csr.sv                                   |   2 +-
 ibex_decoder.sv                               |   2 +-
 ibex_fetch_fifo.sv                            |   2 +-
 ibex_icache.sv                                |   2 +-
 ibex_id_stage.sv                              |   2 +-
 ibex_if_stage.sv                              |   2 +-
 ibex_load_store_unit.sv                       |   2 +-
 ibex_multdiv_fast.sv                          |   2 +-
 ibex_multdiv_slow.sv                          |   2 +-
 ibex_wb_stage.sv                              |   2 +-
 include/lowrisc_prim/prim_assert.svh          | 131 ++++++++++++++++++
 .../lowrisc_prim/prim_assert_dummy_macros.svh |  16 +++
 .../prim_assert_standard_macros.svh           |  58 ++++++++
 .../lowrisc_prim/prim_assert_yosys_macros.svh |  47 +++++++
 19 files changed, 267 insertions(+), 15 deletions(-)
 create mode 100644 rtl/include/lowrisc_prim/prim_assert.svh
 create mode 100644 rtl/include/lowrisc_prim/prim_assert_dummy_macros.svh
 create mode 100644 rtl/include/lowrisc_prim/prim_assert_standard_macros.svh
 create mode 100644 rtl/include/lowrisc_prim/prim_assert_yosys_macros.svh

diff --git a/ibex_branch_predict.sv b/ibex_branch_predict.sv
index 87f83836..3b1387fb 100644
--- a/ibex_branch_predict.sv
+++ b/ibex_branch_predict.sv
@@ -15,7 +15,7 @@
  * The predictor is entirely combinational but takes clk/rst_n signals for use by assertions.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_branch_predict (
   input  logic clk_i,
diff --git a/ibex_compressed_decoder.sv b/ibex_compressed_decoder.sv
index 12a487fe..ff7d8a41 100644
--- a/ibex_compressed_decoder.sv
+++ b/ibex_compressed_decoder.sv
@@ -11,7 +11,7 @@
  * assertions only.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_compressed_decoder (
     input  logic        clk_i,
diff --git a/ibex_controller.sv b/ibex_controller.sv
index 77869e98..9a170d70 100644
--- a/ibex_controller.sv
+++ b/ibex_controller.sv
@@ -7,7 +7,7 @@
  * Main controller of the processor
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_controller #(
     parameter bit WritebackStage  = 0,
diff --git a/ibex_core.sv b/ibex_core.sv
index 2858a66c..b46e95a6 100644
--- a/ibex_core.sv
+++ b/ibex_core.sv
@@ -7,7 +7,7 @@
   `define RVFI
 `endif
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 /**
  * Top level module of the ibex RISC-V core
diff --git a/ibex_cs_registers.sv b/ibex_cs_registers.sv
index 5c84ef03..10086ff9 100644
--- a/ibex_cs_registers.sv
+++ b/ibex_cs_registers.sv
@@ -10,7 +10,7 @@
  * Specification, draft version 1.11
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_cs_registers #(
     parameter bit               DbgTriggerEn      = 0,
diff --git a/ibex_csr.sv b/ibex_csr.sv
index 8623fa55..483e79c1 100644
--- a/ibex_csr.sv
+++ b/ibex_csr.sv
@@ -6,7 +6,7 @@
  * Control / status register primitive
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_csr #(
     parameter int unsigned    Width      = 32,
diff --git a/ibex_decoder.sv b/ibex_decoder.sv
index b61520ed..31490a5c 100644
--- a/ibex_decoder.sv
+++ b/ibex_decoder.sv
@@ -11,7 +11,7 @@
  * assertions only.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_decoder #(
     parameter bit RV32E               = 0,
diff --git a/ibex_fetch_fifo.sv b/ibex_fetch_fifo.sv
index 52fcc8ea..c914e29c 100644
--- a/ibex_fetch_fifo.sv
+++ b/ibex_fetch_fifo.sv
@@ -10,7 +10,7 @@
  * clear_i clears the FIFO for the following cycle, including any new request
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_fetch_fifo #(
   parameter int unsigned NUM_REQS = 2
diff --git a/ibex_icache.sv b/ibex_icache.sv
index 346e6a28..75146228 100644
--- a/ibex_icache.sv
+++ b/ibex_icache.sv
@@ -8,7 +8,7 @@
  * Provides an instruction cache along with cache management, instruction buffering and prefetching
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_icache #(
   parameter bit          BranchPredictor = 1'b0,
diff --git a/ibex_id_stage.sv b/ibex_id_stage.sv
index 162ecdf3..6a6a7e5a 100644
--- a/ibex_id_stage.sv
+++ b/ibex_id_stage.sv
@@ -14,7 +14,7 @@
  * file.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_id_stage #(
     parameter bit               RV32E           = 0,
diff --git a/ibex_if_stage.sv b/ibex_if_stage.sv
index 201fb884..cb375f9e 100644
--- a/ibex_if_stage.sv
+++ b/ibex_if_stage.sv
@@ -10,7 +10,7 @@
  * the read instruction.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_if_stage #(
     parameter int unsigned DmHaltAddr        = 32'h1A110800,
diff --git a/ibex_load_store_unit.sv b/ibex_load_store_unit.sv
index 4d89b257..c1814be8 100644
--- a/ibex_load_store_unit.sv
+++ b/ibex_load_store_unit.sv
@@ -11,7 +11,7 @@
  * and to align bytes and halfwords.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_load_store_unit
 (
diff --git a/ibex_multdiv_fast.sv b/ibex_multdiv_fast.sv
index cf69f005..5c1e7398 100644
--- a/ibex_multdiv_fast.sv
+++ b/ibex_multdiv_fast.sv
@@ -12,7 +12,7 @@
  * 16x16 kernel multiplier and Long Division
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_multdiv_fast #(
     parameter ibex_pkg::rv32m_e RV32M = ibex_pkg::RV32MFast
diff --git a/ibex_multdiv_slow.sv b/ibex_multdiv_slow.sv
index a8d60b4e..366f11a6 100644
--- a/ibex_multdiv_slow.sv
+++ b/ibex_multdiv_slow.sv
@@ -9,7 +9,7 @@
  * Baugh-Wooley multiplier and Long Division
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_multdiv_slow
 (
diff --git a/ibex_wb_stage.sv b/ibex_wb_stage.sv
index 7299ad11..b51923a5 100644
--- a/ibex_wb_stage.sv
+++ b/ibex_wb_stage.sv
@@ -11,7 +11,7 @@
  * a simple passthrough to write data direct to the register file.
  */
 
-`include "prim_assert.sv"
+`include "prim_assert.svh"
 
 module ibex_wb_stage #(
   parameter bit WritebackStage = 1'b0
diff --git a/include/lowrisc_prim/prim_assert.svh b/include/lowrisc_prim/prim_assert.svh
new file mode 100644
index 00000000..8b945c34
--- /dev/null
+++ b/include/lowrisc_prim/prim_assert.svh
@@ -0,0 +1,131 @@
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+// Macros and helper code for using assertions.
+//  - Provides default clk and rst options to simplify code
+//  - Provides boiler plate template for common assertions
+
+`ifndef PRIM_ASSERT_SVH
+`define PRIM_ASSERT_SVH
+
+///////////////////
+// Helper macros //
+///////////////////
+
+// Default clk and reset signals used by assertion macros below.
+`define ASSERT_DEFAULT_CLK clk_i
+`define ASSERT_DEFAULT_RST !rst_ni
+
+// Converts an arbitrary block of code into a Verilog string
+`define PRIM_STRINGIFY(__x) `"__x`"
+
+// ASSERT_ERROR logs an error message with either `uvm_error or with $error.
+//
+// This somewhat duplicates `DV_ERROR macro defined in hw/dv/sv/dv_utils/dv_macros.svh. The reason
+// for redefining it here is to avoid creating a dependency.
+`define ASSERT_ERROR(__name)                                                             \
+`ifdef UVM                                                                               \
+  uvm_pkg::uvm_report_error("ASSERT FAILED", `PRIM_STRINGIFY(__name), uvm_pkg::UVM_NONE, \
+                            `__FILE__, `__LINE__, "", 1);                                \
+`else                                                                                    \
+  $error("%0t: (%0s:%0d) [%m] [ASSERT FAILED] %0s", $time, `__FILE__, `__LINE__,         \
+         `PRIM_STRINGIFY(__name));                                                       \
+`endif
+
+// The basic helper macros are actually defined in "implementation headers". The macros should do
+// the same thing in each case (except for the dummy flavour), but in a way that the respective
+// tools support.
+//
+// If the tool supports assertions in some form, we also define INC_ASSERT (which can be used to
+// hide signal definitions that are only used for assertions).
+//
+// The list of basic macros supported is:
+//
+//  ASSERT_I:     Immediate assertion. Note that immediate assertions are sensitive to simulation
+//                glitches.
+//
+//  ASSERT_INIT:  Assertion in initial block. Can be used for things like parameter checking.
+//
+//  ASSERT_FINAL: Assertion in final block. Can be used for things like queues being empty at end of
+//                sim, all credits returned at end of sim, state machines in idle at end of sim.
+//
+//  ASSERT:       Assert a concurrent property directly. It can be called as a module (or
+//                interface) body item.
+//
+//                Note: We use (__rst !== '0) in the disable iff statements instead of (__rst ==
+//                '1). This properly disables the assertion in cases when reset is X at the
+//                beginning of a simulation. For that case, (reset == '1) does not disable the
+//                assertion.
+//
+//  ASSERT_NEVER: Assert a concurrent property NEVER happens
+//
+//  ASSERT_KNOWN: Assert that signal has a known value (each bit is either '0' or '1') after reset.
+//                It can be called as a module (or interface) body item.
+//
+//  COVER:        Cover a concurrent property
+//
+//  ASSUME:       Assume a concurrent property
+//
+//  ASSUME_I:     Assume an immediate property
+
+`ifdef VERILATOR
+ `include "prim_assert_dummy_macros.svh"
+`elsif SYNTHESIS
+ `include "prim_assert_dummy_macros.svh"
+`elsif YOSYS
+ `include "prim_assert_yosys_macros.svh"
+ `define INC_ASSERT
+`else
+ `include "prim_assert_standard_macros.svh"
+ `define INC_ASSERT
+`endif
+
+//////////////////////////////
+// Complex assertion macros //
+//////////////////////////////
+
+// Assert that signal is an active-high pulse with pulse length of 1 clock cycle
+`define ASSERT_PULSE(__name, __sig, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  `ASSERT(__name, $rose(__sig) |=> !(__sig), __clk, __rst)
+
+// Assert that a property is true only when an enable signal is set.  It can be called as a module
+// (or interface) body item.
+`define ASSERT_IF(__name, __prop, __enable, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  `ASSERT(__name, (__enable) |-> (__prop), __clk, __rst)
+
+// Assert that signal has a known value (each bit is either '0' or '1') after reset if enable is
+// set.  It can be called as a module (or interface) body item.
+`define ASSERT_KNOWN_IF(__name, __sig, __enable, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  `ASSERT_KNOWN(__name``KnownEnable, __enable, __clk, __rst)                                               \
+  `ASSERT_IF(__name, !$isunknown(__sig), __enable, __clk, __rst)
+
+//////////////////////////////////
+// For formal verification only //
+//////////////////////////////////
+
+// Note that the existing set of ASSERT macros specified above shall be used for FPV,
+// thereby ensuring that the assertions are evaluated during DV simulations as well.
+
+// ASSUME_FPV
+// Assume a concurrent property during formal verification only.
+`define ASSUME_FPV(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+`ifdef FPV_ON                                                                                \
+   `ASSUME(__name, __prop, __clk, __rst)                                                     \
+`endif
+
+// ASSUME_I_FPV
+// Assume a concurrent property during formal verification only.
+`define ASSUME_I_FPV(__name, __prop) \
+`ifdef FPV_ON                        \
+   `ASSUME_I(__name, __prop)         \
+`endif
+
+// COVER_FPV
+// Cover a concurrent property during formal verification
+`define COVER_FPV(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+`ifdef FPV_ON                                                                               \
+   `COVER(__name, __prop, __clk, __rst)                                                     \
+`endif
+
+`endif // PRIM_ASSERT_SV
diff --git a/include/lowrisc_prim/prim_assert_dummy_macros.svh b/include/lowrisc_prim/prim_assert_dummy_macros.svh
new file mode 100644
index 00000000..6479abf8
--- /dev/null
+++ b/include/lowrisc_prim/prim_assert_dummy_macros.svh
@@ -0,0 +1,16 @@
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+// Macro bodies included by prim_assert.svhh for tools that don't support assertions. See
+// prim_assert.svh for documentation for each of the macros.
+
+`define ASSERT_I(__name, __prop)
+`define ASSERT_INIT(__name, __prop)
+`define ASSERT_FINAL(__name, __prop)
+`define ASSERT(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+`define ASSERT_NEVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+`define ASSERT_KNOWN(__name, __sig, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+`define COVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+`define ASSUME(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+`define ASSUME_I(__name, __prop)
diff --git a/include/lowrisc_prim/prim_assert_standard_macros.svh b/include/lowrisc_prim/prim_assert_standard_macros.svh
new file mode 100644
index 00000000..6a2d2977
--- /dev/null
+++ b/include/lowrisc_prim/prim_assert_standard_macros.svh
@@ -0,0 +1,58 @@
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+// Macro bodies included by prim_assert.svhh for tools that support full SystemVerilog and SVA syntax.
+// See prim_assert.svh for documentation for each of the macros.
+
+`define ASSERT_I(__name, __prop) \
+  __name: assert (__prop)        \
+    else begin                   \
+      `ASSERT_ERROR(__name)      \
+    end
+
+`define ASSERT_INIT(__name, __prop) \
+  initial begin                     \
+    __name: assert (__prop)         \
+      else begin                    \
+        `ASSERT_ERROR(__name)       \
+      end                           \
+  end
+
+`define ASSERT_FINAL(__name, __prop)                                         \
+  final begin                                                                \
+    __name: assert (__prop || $test$plusargs("disable_assert_final_checks")) \
+      else begin                                                             \
+        `ASSERT_ERROR(__name)                                                \
+      end                                                                    \
+  end
+
+`define ASSERT(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  __name: assert property (@(posedge __clk) disable iff ((__rst) !== '0) (__prop))       \
+    else begin                                                                           \
+      `ASSERT_ERROR(__name)                                                              \
+    end
+
+`define ASSERT_NEVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  __name: assert property (@(posedge __clk) disable iff ((__rst) !== '0) not (__prop))         \
+    else begin                                                                                 \
+      `ASSERT_ERROR(__name)                                                                    \
+    end
+
+`define ASSERT_KNOWN(__name, __sig, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  `ASSERT(__name, !$isunknown(__sig), __clk, __rst)
+
+`define COVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  __name: cover property (@(posedge __clk) disable iff ((__rst) !== '0) (__prop));
+
+`define ASSUME(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  __name: assume property (@(posedge __clk) disable iff ((__rst) !== '0) (__prop))       \
+    else begin                                                                           \
+      `ASSERT_ERROR(__name)                                                              \
+    end
+
+`define ASSUME_I(__name, __prop) \
+  __name: assume (__prop)        \
+    else begin                   \
+      `ASSERT_ERROR(__name)      \
+    end
diff --git a/include/lowrisc_prim/prim_assert_yosys_macros.svh b/include/lowrisc_prim/prim_assert_yosys_macros.svh
new file mode 100644
index 00000000..e943a1de
--- /dev/null
+++ b/include/lowrisc_prim/prim_assert_yosys_macros.svh
@@ -0,0 +1,47 @@
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+// Macro bodies included by prim_assert.svhh for formal verification with Yosys. See prim_assert.svh
+// for documentation for each of the macros.
+
+`define ASSERT_I(__name, __prop)    \
+  always_comb begin : __name        \
+    assert (__prop);                \
+  end
+
+`define ASSERT_INIT(__name, __prop)    \
+  initial begin : __name               \
+    assert (__prop);                   \
+  end
+
+// This doesn't make much sense for a formal tool (we never get to the final block!)
+`define ASSERT_FINAL(__name, __prop)
+
+`define ASSERT(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  always_ff @(posedge __clk) begin                                                       \
+    if (! (__rst !== '0)) __name: assert (__prop);                                       \
+  end
+
+`define ASSERT_NEVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  always_ff @(posedge __clk) begin                                                             \
+    if (! (__rst !== '0)) __name: assert (! (__prop));                                         \
+  end
+
+// Yosys uses 2-state logic, so this doesn't make sense here
+`define ASSERT_KNOWN(__name, __sig, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST)
+
+`define COVER(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  always_ff @(posedge __clk) begin : __name                                             \
+    cover ((! (__rst !== '0)) && (__prop));                                             \
+  end
+
+`define ASSUME(__name, __prop, __clk = `ASSERT_DEFAULT_CLK, __rst = `ASSERT_DEFAULT_RST) \
+  always_ff @(posedge __clk) begin                                                       \
+    if (! (__rst !== '0)) __name: assume (__prop);                                       \
+  end
+
+`define ASSUME_I(__name, __prop)              \
+  always_comb begin : __name                  \
+    assume (__prop);                          \
+  end
-- 
2.25.1

